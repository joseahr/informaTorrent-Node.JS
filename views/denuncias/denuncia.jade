extends ../base/map_layout
block meta
	meta(property='og:url' content='/app/denuncia/#{denuncia.gid}')
	meta(property='og:type' content='website')
	meta(property='og:title' content='Your Website Title')
	meta(property='og:description' content='Your description')
block panel-lateral
	#imagenes.cd-panel.from-right
		header.cd-panel-header
			h1(style="margin-top: 0px; color: #55ACEE !important; font-size: 20px;") Imágenes
			a.cd-panel-close(href='#0') Close
		.cd-panel-container
			.cd-panel-content
				if(denuncia.imagenes)
					p Contiene #{denuncia.imagenes.length} imágenes
					.well(style="height: 100%;")
						#thumbnail-preview-indicators.carousel.slide(data-ride='carousel' style="height: 100%;")
							ol.carousel-indicators
								- var aux = 0;
								each imagen in denuncia.imagenes
									if aux == 0
										li.active(data-target='#thumbnail-preview-indicators', data-slide-to='#{aux}')
											.thumbnail
												img.img-responsive(src='#{imagen.path}')										
									else
										li(data-target='#thumbnail-preview-indicators', data-slide-to='#{aux}')
											.thumbnail
												img.img-responsive(src='#{imagen.path}' style="height: 10%;")
									- aux++;
							.carousel-inner(style="height: 100%;")
								- var aux = 0
								if denuncia.imagenes
									each imagen in denuncia.imagenes
										if aux == 0
											.item.slides.active(style="height: 100%;")
												.slide(class="slide-#{aux + 1}" style="height: 100%;background: url('#{imagen.path}'); background-size: 100% 100%;")
										else
											.item.slides(style="height: 100%;")
												div(class="slide-#{aux + 1}" style="height: 100%;background: url('#{imagen.path}'); background-size: 100% 100%;")
										- aux++;
				else
					p Esta denuncia no contiene imágenes
block script
	// TinyMCE Editor
	script(src="//cdn.tinymce.com/4/tinymce.min.js")
	script(src='/javascripts/plugins/ol3-ext/style/photostyle.js')
	script.
		//alert('!{denuncia.descripcion}');
		var denuncia = {
			titulo: '#{denuncia.titulo}',
			descripcion: '!{denuncia.descripcion}',
			gid: '#{denuncia.gid}',
			fecha : '#{denuncia.fecha}',
			id_usuario: '#{denuncia.id_usuario}',
			usuario : JSON.parse('!{JSON.stringify(denuncia.usuario[0])}'),
			veces_vista : '#{denuncia.veces_vista}',
			likes : JSON.parse('!{JSON.stringify(denuncia.likes)}'),
			comentarios : JSON.parse('!{JSON.stringify(denuncia.comentarios)}'),
			imagenes : JSON.parse('!{JSON.stringify(denuncia.imagenes)}'),
			tags : JSON.parse('!{JSON.stringify(denuncia.tags_)}')
		};

		var notificacion = JSON.parse('!{JSON.stringify(notificacion) || null}');
		console.log('notificacion', notificacion);

		var user;
		if('#{user}' == ''){
			user = undefined;
		} else {
			user = JSON.parse('!{JSON.stringify(user)}');
		}

		console.log(user);
		
		var json = JSON.parse('!{JSON.stringify(denuncia.geometria)}'); // geometría del servidor
		var type = json.type;

		var feature;

		if(type == 'Point'){
			feature = new ol.Feature({
				  geometry: new ol.geom.Point(json.coordinates),
				  name: 'Denuncia - Punto'
			});
		}
		else if(type == 'LineString'){
			feature = new ol.Feature({
				geometry: new ol.geom.LineString(json.coordinates),
				name: 'Denuncia - Polígono'
			});
		}
		else if(type == 'Polygon'){
			feature = new ol.Feature({
				geometry: new ol.geom.Polygon(json.coordinates),
				name: 'Denuncia - Polígono'
			});
		}

		vector.getSource().addFeature(feature);

		map.addLayer(vector);

		var geom = feature.getGeometry().getExtent();
		var size = map.getSize();

		parseNoti(notificacion);

		map.getView().fit(geom,size);
		// solo podemos acceder a ella desde este tipo de scripts que tienen un punto al final
		map.addControl(new app.InfoDenuncia({},denuncia));
		map.addControl(new app.ImagenesDenuncia({},denuncia));
		map.addControl(new app.ComentariosDenuncia({}, denuncia, user));
		map.addControl(new app.LikeDenuncia());

		function parseNoti(noti){
			if(noti.tipo == 'DENUNCIA_CERCA'){
				var posicion = noti.datos.location;
				var vector_ = new ol.layer.Vector({
					displayInLayerSwitcher: false,
					source: new ol.source.Vector({
						format: new ol.format.GeoJSON()
				    }),
				    style : styleMarkers
				});
				var feature_pos = new ol.Feature({
					geometry: new ol.geom.Point(posicion.coordinates),
					name: 'Ubicación',
				});
				feature_pos.attributes = {};
				feature_pos.attributes.marker_type = 'posicion';

				vector_.getSource().addFeature(feature_pos);

				var denuncia_centro = ol.extent.getCenter(feature.getGeometry().getExtent());

				var coo = []; coo.push(denuncia_centro); coo.push(posicion.coordinates);
				var feature_lin = new ol.Feature({
					geometry: new ol.geom.LineString(coo),
					name: 'Linea',
					attributes : {marker_type : 'posicion_linea'}
				});
				feature_lin.attributes = {};
				feature_lin.attributes.marker_type = 'posicion_linea';

				vector_.getSource().addFeature(feature_lin);

				map.addLayer(vector_);

				feature_pos.setStyle(
					new ol.style.Style({
						image: new ol.style.Photo ({
							src: noti.profile_to.picture,
							radius: 12,
							crop: true,
							kind: 'anchored',
							shadow: 5,
							onload: function() { vector_.changed(); },
							stroke: new ol.style.Stroke(
							{	width: 2,
								color: '#fff'
							})
						})
					})
				);

			}
			else if(noti.tipo == 'COMENTARIO_DENUNCIA'){
				console.log('comentario', noti);
				$(function(){
					$('.comentarios_denuncia').find('button').click();
					var date = new Date(noti.fecha),
					fecha_id = date.getFullYear() + '-' + date.getMonth() + '-' + date.getDate() + '-' + date.getHours() + '-' + date.getMinutes();
					console.log('#' + noti.id_usuario_from + fecha_id);
					var selector = '#' + noti.id_usuario_from + fecha_id;
					setTimeout(function(){
						$(selector).get(0).scrollIntoView();
						$(selector).css('background-color', '#ffbb00');
						setTimeout(function(){
							$(selector).css('background-color', '#fff');
						},1000);
					}, 1000);
				});
			}
		};